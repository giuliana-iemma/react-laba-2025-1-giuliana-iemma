{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/giuli/Documents/Solvd/solvd-react-laba-2025/homeworks/22-nextjs-1/avatar-app-2/src/components/AddAvatarButton.tsx"],"sourcesContent":["import React from 'react';\n\ntype AddAvatarButtonProps = {\n  onClick: () => void;\n};\n\nconst AddAvatarButton = ({ onClick }: AddAvatarButtonProps) => {\n  return (\n    <button className=\"button-add\" onClick={onClick}>\n      <img className=\"button-add__icon\" src=\"/icons/add.svg\" alt=\"Add\" />\n    </button>\n  );\n};\n\nexport default AddAvatarButton;\n"],"names":[],"mappings":";;;;;AAMA,MAAM,kBAAkB,CAAC,EAAE,OAAO,EAAwB;IACxD,qBACE,8OAAC;QAAO,WAAU;QAAa,SAAS;kBACtC,cAAA,8OAAC;YAAI,WAAU;YAAmB,KAAI;YAAiB,KAAI;;;;;;;;;;;AAGjE;uCAEe","debugId":null}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/giuli/Documents/Solvd/solvd-react-laba-2025/homeworks/22-nextjs-1/avatar-app-2/src/components/AvatarCard.tsx"],"sourcesContent":["type AvatarCardProps = {\n  avatarUrl: string;\n  onRefresh: () => void;\n};\n\nconst AvatarCard = ({ avatarUrl, onRefresh }: AvatarCardProps) => {\n  return (\n    <article className=\"card\">\n      <img className=\"card__image\" src={avatarUrl} alt=\"Avatar\" />\n\n      <button className=\"card__button\" onClick={onRefresh}>\n        <img className=\"card__button-icon\" src=\"/icons/refresh.svg\" alt=\"Refresh\" />\n      </button>\n    </article>\n  );\n};\n\nexport default AvatarCard;\n"],"names":[],"mappings":";;;;;AAKA,MAAM,aAAa,CAAC,EAAE,SAAS,EAAE,SAAS,EAAmB;IAC3D,qBACE,8OAAC;QAAQ,WAAU;;0BACjB,8OAAC;gBAAI,WAAU;gBAAc,KAAK;gBAAW,KAAI;;;;;;0BAEjD,8OAAC;gBAAO,WAAU;gBAAe,SAAS;0BACxC,cAAA,8OAAC;oBAAI,WAAU;oBAAoB,KAAI;oBAAqB,KAAI;;;;;;;;;;;;;;;;;AAIxE;uCAEe","debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/giuli/Documents/Solvd/solvd-react-laba-2025/homeworks/22-nextjs-1/avatar-app-2/src/components/RefreshAllButton.tsx"],"sourcesContent":["import React from 'react';\n\ntype RefreshAllButtonProps = {\n  onClick: () => void;\n};\n\nconst RefreshAllButton = ({ onClick }: RefreshAllButtonProps) => {\n  return (\n    <button className=\"button-refresh\" onClick={onClick}>\n      Refresh All\n    </button>\n  );\n};\n\nexport default RefreshAllButton;\n"],"names":[],"mappings":";;;;;AAMA,MAAM,mBAAmB,CAAC,EAAE,OAAO,EAAyB;IAC1D,qBACE,8OAAC;QAAO,WAAU;QAAiB,SAAS;kBAAS;;;;;;AAIzD;uCAEe","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/giuli/Documents/Solvd/solvd-react-laba-2025/homeworks/22-nextjs-1/avatar-app-2/src/components/AvatarGrid.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport AddAvatarButton from './AddAvatarButton';\nimport AvatarCard from './AvatarCard';\nimport RefreshAllButton from './RefreshAllButton';\n\ntype Tile = {\n  id: number;\n  url: string;\n};\n\n//Initial avatars\ntype AvatarGridProps = {\n  initialTiles?: Tile[];\n};\n\nconst AvatarGrid = ({ initialTiles = [] }: AvatarGridProps) => {\n  const [tiles, setTiles] = useState<Tile[]>(initialTiles);\n\n  async function getRandomAvatarUrl() {\n    const res = await fetch('https://tinyfac.es/api/data?limit=50&quality=0');\n    console.log(res);\n\n    const data = await res.json();\n    const random = Math.floor(Math.random() * data.length);\n\n    return data[random].url;\n  }\n\n  //Adding a new object\n  async function handleAddTile() {\n    const avatar = await getRandomAvatarUrl();\n\n    setTiles((prev) => [...prev, { id: Date.now(), url: avatar }]);\n\n    // console.log(tiles);\n  }\n\n  //Refreshing a targetted avatar\n  async function handleRefreshCard(id: number) {\n    const avatar = await getRandomAvatarUrl();\n\n    setTiles((prev) => prev.map((tile) => (tile.id === id ? { ...tile, url: avatar } : tile)));\n\n    // console.log(tiles)\n  }\n\n  ///Refresh all\n  async function handleRefreshAll() {\n    const avatars = await Promise.all(tiles.map(() => getRandomAvatarUrl())); //Wait for all the tiles to load to create the array of random avatar urls\n\n    setTiles((prev) =>\n      prev.map((tile, index) => ({\n        ...tile,\n        url: avatars[index],\n      }))\n    );\n  }\n\n  return (\n    <>\n      <div className=\"card__container\">\n        {tiles &&\n          tiles.map((tile) => (\n            <AvatarCard\n              avatarUrl={tile.url}\n              key={tile.id}\n              onRefresh={() => handleRefreshCard(tile.id)}\n            />\n          ))}\n\n        <AddAvatarButton onClick={() => handleAddTile()} />\n      </div>\n\n      <RefreshAllButton onClick={() => handleRefreshAll()} />\n    </>\n  );\n};\n\nexport default AvatarGrid;\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AALA;;;;;;AAiBA,MAAM,aAAa,CAAC,EAAE,eAAe,EAAE,EAAmB;IACxD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IAE3C,eAAe;QACb,MAAM,MAAM,MAAM,MAAM;QACxB,QAAQ,GAAG,CAAC;QAEZ,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,MAAM;QAErD,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG;IACzB;IAEA,qBAAqB;IACrB,eAAe;QACb,MAAM,SAAS,MAAM;QAErB,SAAS,CAAC,OAAS;mBAAI;gBAAM;oBAAE,IAAI,KAAK,GAAG;oBAAI,KAAK;gBAAO;aAAE;IAE7D,sBAAsB;IACxB;IAEA,+BAA+B;IAC/B,eAAe,kBAAkB,EAAU;QACzC,MAAM,SAAS,MAAM;QAErB,SAAS,CAAC,OAAS,KAAK,GAAG,CAAC,CAAC,OAAU,KAAK,EAAE,KAAK,KAAK;oBAAE,GAAG,IAAI;oBAAE,KAAK;gBAAO,IAAI;IAEnF,qBAAqB;IACvB;IAEA,cAAc;IACd,eAAe;QACb,MAAM,UAAU,MAAM,QAAQ,GAAG,CAAC,MAAM,GAAG,CAAC,IAAM,wBAAwB,0EAA0E;QAEpJ,SAAS,CAAC,OACR,KAAK,GAAG,CAAC,CAAC,MAAM,QAAU,CAAC;oBACzB,GAAG,IAAI;oBACP,KAAK,OAAO,CAAC,MAAM;gBACrB,CAAC;IAEL;IAEA,qBACE;;0BACE,8OAAC;gBAAI,WAAU;;oBACZ,SACC,MAAM,GAAG,CAAC,CAAC,qBACT,8OAAC,gIAAA,CAAA,UAAU;4BACT,WAAW,KAAK,GAAG;4BAEnB,WAAW,IAAM,kBAAkB,KAAK,EAAE;2BADrC,KAAK,EAAE;;;;;kCAKlB,8OAAC,qIAAA,CAAA,UAAe;wBAAC,SAAS,IAAM;;;;;;;;;;;;0BAGlC,8OAAC,sIAAA,CAAA,UAAgB;gBAAC,SAAS,IAAM;;;;;;;;AAGvC;uCAEe","debugId":null}}]
}